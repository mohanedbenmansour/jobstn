{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/auth/auth.guard.ts","webpack:///src/app/components/admin-dashboard/admin-dashboard.component.ts","webpack:///src/app/components/admin-dashboard/admin-dashboard.component.html","webpack:///src/app/components/applicant-page/applicant-page.component.ts","webpack:///src/app/components/applicant-page/applicant-page.component.html","webpack:///src/app/components/enterprise-page/enterprise-page.component.ts","webpack:///src/app/components/enterprise-page/enterprise-page.component.html","webpack:///src/app/components/home-page/home-page.component.ts","webpack:///src/app/components/home-page/home-page.component.html","webpack:///src/app/components/sign-in/sign-in.component.ts","webpack:///src/app/components/sign-in/sign-in.component.html","webpack:///src/app/components/sign-up/sign-up.component.ts","webpack:///src/app/components/sign-up/sign-up.component.html","webpack:///src/app/services/post.service.ts","webpack:///src/app/services/user.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","children","redirectTo","pathMatch","canActivate","data","role","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","provide","useClass","declarations","providers","bootstrap","AuthGuard","userService","router","next","state","url","checkUserLogin","currentRoute","currentState","nextState","route","segments","isLoggedIn","userRole","getRole","indexOf","navigate","providedIn","AdminDashboardComponent","postService","deleteEmail","deleteRole","deleteToken","navigateByUrl","logout","ApplicantPageComponent","readPosts","getPosts","subscribe","console","log","posts","error","EnterprisePageComponent","image","event","target","files","formValue","formData","FormData","Object","key","value","append","form","today","Date","enterprise","type","address","toISOString","salary","experience","description","getEmail","tags","createPost","err","onSubmit","onFileChanged","HomePageComponent","SignInComponent","userModel","email","password","emailRegex","login","res","setToken","setRole","setEmail","goToDashboard","serverErrorMessages","message","SignUpComponent","createUser","showSuccessMessage","setTimeout","resetForm","PostService","http","selectedPost","date","post","get","UserService","selectedUser","name","noAuthHeader","headers","NoAuth","user","authCredentials","token","localStorage","setItem","getItem","removeItem","getToken","userPayload","atob","split","JSON","parse","getUserPayload","exp","now","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SignInComponent } from './components/sign-in/sign-in.component';\nimport { SignUpComponent } from './components/sign-up/sign-up.component';\nimport { HomePageComponent } from './components/home-page/home-page.component';\nimport { ApplicantPageComponent } from './components/applicant-page/applicant-page.component';\nimport { EnterprisePageComponent } from './components/enterprise-page/enterprise-page.component';\nimport { AdminDashboardComponent } from './components/admin-dashboard/admin-dashboard.component';\nimport { AuthGuard } from './auth/auth.guard';\nconst routes: Routes = [\n  {\n    path: 'signup',\n    component: HomePageComponent,\n    children: [{ path: '', component: SignUpComponent }],\n  },\n  {\n    path: 'signin',\n    component: HomePageComponent,\n    children: [{ path: '', component: SignInComponent }],\n  },\n  { path: '', redirectTo: '/signin', pathMatch: 'full' },\n  {\n    path: 'home',\n    component: ApplicantPageComponent,\n    canActivate: [AuthGuard],\n    data: {\n      role: 'applicant',\n    },\n  },\n  {\n    path: 'enterprise',\n    component: EnterprisePageComponent,\n    canActivate: [AuthGuard],\n    data: {\n      role: 'enterprise',\n    },\n  },\n  {\n    path: 'admindashboard',\n    component: AdminDashboardComponent,\n    canActivate: [AuthGuard],\n    data: {\n      role: 'admin',\n    },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'client';\n}\n","<router-outlet></router-outlet>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { SignInComponent } from './components/sign-in/sign-in.component';\nimport { SignUpComponent } from './components/sign-up/sign-up.component';\nimport { HomePageComponent } from './components/home-page/home-page.component';\n\nimport { UserService } from './services/user.service';\nimport { PostService } from './services/post.service';\n\nimport { FormsModule } from '@angular/forms';\n\nimport { ApplicantPageComponent } from './components/applicant-page/applicant-page.component';\nimport { EnterprisePageComponent } from './components/enterprise-page/enterprise-page.component';\nimport { AdminDashboardComponent } from './components/admin-dashboard/admin-dashboard.component';\n\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { AuthGuard } from './auth/auth.guard';\nimport { HashLocationStrategy, LocationStrategy } from '@angular/common';\n\nimport { NoopAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatIconModule } from '@angular/material/icon';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SignInComponent,\n    SignUpComponent,\n    HomePageComponent,\n    ApplicantPageComponent,\n    EnterprisePageComponent,\n    AdminDashboardComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpClientModule,\n    MatChipsModule,\n    NoopAnimationsModule,\n    MatIconModule,\n  ],\n  providers: [\n    PostService,\n    UserService,\n    AuthGuard,\n    { provide: LocationStrategy, useClass: HashLocationStrategy },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree,\n  CanActivateChild,\n  CanDeactivate,\n  CanLoad,\n  Route,\n  UrlSegment,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { UserService } from '../services/user.service';\nimport { Router } from '@angular/router';\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard\n  implements CanActivate, CanActivateChild, CanDeactivate<unknown>, CanLoad {\n  constructor(private userService: UserService, private router: Router) {}\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    let url: string = state.url;\n    return this.checkUserLogin(next, url);\n  }\n  canActivateChild(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    return this.canActivate(next, state);\n  }\n  canDeactivate(\n    component: unknown,\n    currentRoute: ActivatedRouteSnapshot,\n    currentState: RouterStateSnapshot,\n    nextState?: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    return true;\n  }\n  canLoad(\n    route: Route,\n    segments: UrlSegment[]\n  ): Observable<boolean> | Promise<boolean> | boolean {\n    return true;\n  }\n\n  checkUserLogin(route: ActivatedRouteSnapshot, url: any): boolean {\n    if (this.userService.isLoggedIn()) {\n      const userRole = this.userService.getRole();\n      if (route.data.role && route.data.role.indexOf(userRole) === -1) {\n        this.router.navigate(['/signin']);\n        return false;\n      }\n      return true;\n    }\n\n    this.router.navigate(['/signin']);\n    return false;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UserService } from '../../services/user.service';\nimport { PostService } from '../../services/post.service';\nimport { Post } from '../../shared/post';\n@Component({\n  selector: 'app-admin-dashboard',\n  templateUrl: './admin-dashboard.component.html',\n  styleUrls: ['./admin-dashboard.component.scss'],\n})\nexport class AdminDashboardComponent implements OnInit {\n  constructor(\n    private router: Router,\n    private postService: PostService,\n    private userService: UserService\n  ) {}\n\n  ngOnInit(): void {}\n  logout() {\n    this.userService.deleteEmail();\n    this.userService.deleteRole();\n    this.userService.deleteToken();\n    this.router.navigateByUrl('/signin');\n  }\n}\n","<nav class=\"navbar navbar-expand-lg navbar-light bg-light cont\">\n  <button class=\"btn btn-danger ml-auto\" (click)=\"logout()\">\n    logout\n  </button>\n</nav>\n\n<h1>\n  COMING SOON\n</h1>\n","import { Component, OnInit } from '@angular/core';\nimport { User } from 'src/app/shared/user';\nimport { Router } from '@angular/router';\nimport { UserService } from '../../services/user.service';\nimport { PostService } from '../../services/post.service';\nimport { Post } from '../../shared/post';\n@Component({\n  selector: 'app-applicant-page',\n  templateUrl: './applicant-page.component.html',\n  styleUrls: ['./applicant-page.component.scss'],\n})\nexport class ApplicantPageComponent implements OnInit {\n  posts: Post[];\n  constructor(\n    private userService: UserService,\n    private router: Router,\n    private postService: PostService\n  ) {}\n\n  ngOnInit(): void {\n    this.readPosts();\n  }\n  logout() {\n    this.userService.deleteEmail();\n    this.userService.deleteRole();\n    this.userService.deleteToken();\n    this.router.navigateByUrl('/signin');\n  }\n  readPosts() {\n    this.postService.getPosts().subscribe(\n      (data) => {\n        console.log(data);\n        this.posts = data['msg'];\n      },\n      (error) => {\n        console.log(error);\n      }\n    );\n  }\n}\n","<nav class=\"navbar navbar-expand-lg navbar-light bg-light cont\">\n  <button class=\"btn btn-danger ml-auto\" (click)=\"logout()\">\n    logout\n  </button>\n</nav>\n<link\n  href=\"//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css\"\n  rel=\"stylesheet\"\n  id=\"bootstrap-css\"\n/>\n<script src=\"//netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js\"></script>\n<script src=\"//code.jquery.com/jquery-1.11.1.min.js\"></script>\n\n<div class=\"container\" *ngFor=\"let post of posts\">\n  <div class=\"row\">\n    <div class=\"col-xs-12 col-sm-8 col-md-8\">\n      <div class=\"well well-sm\">\n        <div class=\"row\">\n          <div class=\"col-sm-6 col-md-4\">\n            <img\n              src=\"{{ post.image }}\"\n              alt=\"\"\n              class=\"img-rounded img-responsive\"\n            />\n          </div>\n          <div class=\"col-sm-6 col-md-8\">\n            <h4>\n              {{ post.title }}\n            </h4>\n            <small\n              ><cite title=\"{{ post.address }}\"\n                >{{ post.address }}\n                <i class=\"glyphicon glyphicon-map-marker\"> </i></cite\n            ></small>\n            <p>\n              <i class=\"glyphicon glyphicon-envelope\"></i>{{ post.email }}\n              <br />\n              <i class=\"glyphicon glyphicon-globe\"></i>{{ post.enterprise }}\n              <br />\n              <i class=\"glyphicon glyphicon-gift\"></i>{{ post.date }}\n            </p>\n            <p>\n              <strong> Description:</strong>\n              {{ post.description }}\n            </p>\n            <!-- Split button -->\n            <div class=\"btn-group\">\n              <button type=\"button\" class=\"btn btn-primary\">\n                see more\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit, ElementRef, ViewChild } from '@angular/core';\nimport { PostService } from '../../services/post.service';\nimport { NgForm, FormGroup, FormControl } from '@angular/forms';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatIconModule } from '@angular/material/icon';\nimport { Post } from 'src/app/shared/post';\nimport { title } from 'process';\nimport { UserService } from '../../services/user.service';\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-enterprise-page',\n  templateUrl: './enterprise-page.component.html',\n  styleUrls: ['./enterprise-page.component.scss'],\n})\nexport class EnterprisePageComponent implements OnInit {\n  newPost: Post;\n  postToSend: any;\n\n  constructor(\n    public postService: PostService,\n    private userService: UserService,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {}\n  //@ViewChild('image', { static: false })\n  image: File = null;\n  onFileChanged(event) {\n    this.image = <File>event.target.files[0];\n    console.log(this.image);\n  }\n\n  toFormData<T>(formValue: T) {\n    const formData = new FormData();\n\n    for (const key of Object.keys(formValue)) {\n      const value = formValue[key];\n      formData.append(key, value);\n    }\n\n    return formData;\n  }\n\n  onSubmit(form: NgForm) {\n    const formData = new FormData();\n    const today = new Date();\n    formData.append('image', this.image);\n\n    formData.append('title', form.value.title);\n    formData.append('enterprise', form.value.enterprise);\n    formData.append('type', form.value.type);\n    formData.append('address', form.value.address);\n    formData.append('date', today.toISOString());\n    formData.append('salary', form.value.salary);\n    formData.append('experience', form.value.experience);\n    formData.append('description', form.value.description);\n    formData.append('email', this.userService.getEmail());\n    formData.append('tags', form.value.tags);\n\n    this.postService.createPost(formData).subscribe(\n      (data) => {\n        console.log(data);\n      },\n      (err) => {\n        console.log(err);\n      }\n    );\n  }\n  logout() {\n    this.userService.deleteEmail();\n    this.userService.deleteRole();\n    this.userService.deleteToken();\n    this.router.navigateByUrl('/signin');\n  }\n}\n","<nav class=\"navbar navbar-expand-lg navbar-light bg-light cont\">\n  <button class=\"btn btn-danger ml-auto\" (click)=\"logout()\">\n    logout\n  </button>\n</nav>\n<div class=\"wrapper\">\n  <div id=\"formContent\">\n    <h1 class=\"header-tag\">Add Post</h1>\n    <form\n      #addPostForm=\"ngForm\"\n      (ngSubmit)=\"addPostForm.valid && onSubmit(addPostForm)\"\n    >\n      <div class=\"d-flex justify-content-center\">\n        <div>\n          <input\n            type=\"text\"\n            #title=\"ngModel\"\n            [(ngModel)]=\"postService.selectedPost.title\"\n            name=\"title\"\n            placeholder=\"Title\"\n            required\n          />\n          <input\n            type=\"text\"\n            #enterprise=\"ngModel\"\n            [(ngModel)]=\"postService.selectedPost.enterprise\"\n            name=\"enterprise\"\n            placeholder=\"Enterprise name\"\n            required\n          />\n          <input\n            type=\"text\"\n            #type=\"ngModel\"\n            [(ngModel)]=\"postService.selectedPost.type\"\n            name=\"type\"\n            placeholder=\"Type\"\n            required\n          />\n          <input\n            type=\"text\"\n            #address=\"ngModel\"\n            [(ngModel)]=\"postService.selectedPost.address\"\n            name=\"address\"\n            placeholder=\"address\"\n            required\n          />\n          <input\n            type=\"text\"\n            #salary=\"ngModel\"\n            [(ngModel)]=\"postService.selectedPost.salary\"\n            name=\"salary\"\n            placeholder=\"salary\"\n            required\n          />\n        </div>\n        <div>\n          <input\n            type=\"text\"\n            #experience=\"ngModel\"\n            [(ngModel)]=\"postService.selectedPost.experience\"\n            name=\"experience\"\n            placeholder=\"Experience\"\n            required\n          />\n          <input\n            type=\"text\"\n            #description=\"ngModel\"\n            [(ngModel)]=\"postService.selectedPost.description\"\n            name=\"description\"\n            placeholder=\"Description\"\n            required\n          />\n\n          <input\n            type=\"text\"\n            #tags=\"ngModel\"\n            [(ngModel)]=\"postService.selectedPost.tags\"\n            name=\"tags\"\n            placeholder=\"Tags\"\n            required\n          />\n          <div class=\"button-wrap mt-3\">\n            <label class=\"new-button\" for=\"upload\">upload image</label>\n            <input\n              id=\"upload\"\n              (change)=\"onFileChanged($event)\"\n              #fileInput\n              type=\"file\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <input type=\"submit\" value=\"Add Post\" />\n    </form>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home-page',\n  templateUrl: './home-page.component.html',\n  styleUrls: ['./home-page.component.scss'],\n})\nexport class HomePageComponent implements OnInit {\n  constructor() {}\n\n  ngOnInit(): void {}\n}\n","<div class=\"wrapper\">\n  <div id=\"formContent\">\n    <h2\n      class=\"underlineHover\"\n      routerLink=\"/signin\"\n      routerLinkActive=\"active\"\n      class=\"mr-3\"\n    >\n      Sign In\n    </h2>\n    <h2 class=\"underlineHover\" routerLink=\"/signup\" routerLinkActive=\"active\">\n      Sign Up\n    </h2>\n    <router-outlet></router-outlet>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { User } from '../../shared/user';\nimport { Router } from '@angular/router';\nimport { UserService } from '../../services/user.service';\nimport { NgForm } from '@angular/forms';\n@Component({\n  selector: 'app-sign-in',\n  templateUrl: './sign-in.component.html',\n  styleUrls: ['./sign-in.component.scss'],\n})\nexport class SignInComponent implements OnInit {\n  userModel = {\n    email: '',\n    password: '',\n  };\n  constructor(public userService: UserService, private router: Router) {}\n\n  emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n  showSuccessMessage: boolean;\n  serverErrorMessages: string;\n\n  ngOnInit(): void {\n    if (this.userService.isLoggedIn()) this.router.navigate(['/home']);\n  }\n  onSubmit(form: NgForm) {\n    this.userService.login(form.value).subscribe(\n      (res) => {\n        console.log(res['data'].role);\n        this.userService.setToken(res['accessToken']);\n        this.userService.setRole(res['data'].role);\n        this.userService.setEmail(res['data'].email);\n        this.goToDashboard();\n      },\n      (err) => {\n        this.serverErrorMessages = err.error.message;\n      }\n    );\n  }\n  goToDashboard() {\n    let role = this.userService.getRole();\n    if (role == 'admin') this.router.navigateByUrl('/admindashboard');\n    if (role == 'enterprise') this.router.navigateByUrl('/enterprise');\n    if (role == 'applicant') this.router.navigateByUrl('/home');\n  }\n}\n","<form\n  #signInForm=\"ngForm\"\n  (ngSubmit)=\"signInForm.valid && onSubmit(signInForm)\"\n>\n  <input\n    type=\"text\"\n    name=\"email\"\n    #email=\"ngModel\"\n    [(ngModel)]=\"userModel.email\"\n    placeholder=\"Email\"\n    [pattern]=\"emailRegex\"\n    required\n    [ngClass]=\"{ 'invalid-textbox': signInForm.submitted && !email.valid }\"\n  />\n  <div *ngIf=\"signInForm.submitted && email.errors?.pattern\">\n    <label class=\"validation-message\">Invalid email address.</label>\n  </div>\n  <input\n    type=\"password\"\n    name=\"password\"\n    #password=\"ngModel\"\n    [(ngModel)]=\"userModel.password\"\n    placeholder=\"Password\"\n    required\n    minlength=\"4\"\n    [ngClass]=\"{ 'invalid-textbox': signInForm.submitted && !password.valid }\"\n  />\n  <div *ngIf=\"signInForm.submitted && password.errors?.minlength\">\n    <label class=\"validation-message\">Minimum 4 characters.</label>\n  </div>\n  <input type=\"submit\" value=\"Sign In\" />\n</form>\n<!-- Error message -->\n<div class=\"alert\" *ngIf=\"serverErrorMessages\">\n  {{ serverErrorMessages }}\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../../services/user.service';\nimport { NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.component.html',\n  styleUrls: ['./sign-up.component.scss'],\n})\nexport class SignUpComponent implements OnInit {\n  emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  showSuccessMessage: boolean;\n  serverErrorMessages: string;\n\n  ngOnInit(): void {}\n  constructor(public userService: UserService, private router: Router) {}\n\n  onSubmit(form: NgForm) {\n    this.userService.createUser(form.value).subscribe(\n      (data) => {\n        console.log(form.value);\n        this.showSuccessMessage = true;\n        console.log(form.value);\n        setTimeout(() => (this.showSuccessMessage = false), 4000);\n        this.resetForm(form);\n      },\n      (err) => {\n        console.log(form.value);\n        this.serverErrorMessages = 'Something went wrong.Please contact admin.';\n      }\n    );\n  }\n  resetForm(form: NgForm) {\n    form.resetForm();\n    this.serverErrorMessages = '';\n  }\n}\n","<form\n  #signUpForm=\"ngForm\"\n  (ngSubmit)=\"signUpForm.valid && onSubmit(signUpForm)\"\n>\n  <input\n    type=\"text\"\n    #name=\"ngModel\"\n    [(ngModel)]=\"userService.selectedUser.name\"\n    name=\"name\"\n    placeholder=\"Full Name\"\n    required\n    [ngClass]=\"{ 'invalid-textbox': signUpForm.submitted && !name.valid }\"\n  />\n  <div *ngIf=\"signUpForm.submitted && !name.valid\">\n    <label class=\"validation-message\">This field is required.</label>\n  </div>\n  <input\n    type=\"text\"\n    #email=\"ngModel\"\n    [(ngModel)]=\"userService.selectedUser.email\"\n    name=\"email\"\n    placeholder=\"Email\"\n    required\n    [pattern]=\"emailRegex\"\n    [ngClass]=\"{ 'invalid-textbox': signUpForm.submitted && !email.valid }\"\n  />\n  <div *ngIf=\"signUpForm.submitted && email.errors\">\n    <label *ngIf=\"email.errors.required\" class=\"validation-message\"\n      >This field is required.</label\n    >\n    <label *ngIf=\"email.errors.pattern\" class=\"validation-message\"\n      >Invalid email address.</label\n    >\n  </div>\n  <input\n    type=\"password\"\n    #password=\"ngModel\"\n    [(ngModel)]=\"userService.selectedUser.password\"\n    name=\"password\"\n    placeholder=\"Password\"\n    minlength=\"4\"\n    required\n    [ngClass]=\"{ 'invalid-textbox': signUpForm.submitted && !password.valid }\"\n  />\n  <div *ngIf=\"signUpForm.submitted && password.errors\">\n    <label *ngIf=\"password.errors.required\" class=\"validation-message\"\n      >This field is required.</label\n    >\n    <label *ngIf=\"password.errors.minlength\" class=\"validation-message\"\n      >Enter atleast 4 characters.</label\n    >\n  </div>\n  <div>\n    <p>\n      <input\n        type=\"radio\"\n        id=\"test1\"\n        name=\"role\"\n        #role=\"ngModel\"\n        value=\"applicant\"\n        [(ngModel)]=\"userService.selectedUser.role\"\n        checked\n      />\n      <label for=\"test1\">Applicant</label>\n    </p>\n    <p>\n      <input\n        type=\"radio\"\n        id=\"test2\"\n        name=\"role\"\n        #role=\"ngModel\"\n        value=\"enterprise\"\n        [(ngModel)]=\"userService.selectedUser.role\"\n      />\n      <label for=\"test2\">Enterprise</label>\n    </p>\n  </div>\n\n  <input type=\"submit\" value=\"Sign Up\" />\n</form>\n\n<!-- Success message -->\n<div class=\"success\" *ngIf=\"showSuccessMessage\">\n  Saved successfully\n</div>\n\n<!-- Error message -->\n<div class=\"alert\" *ngIf=\"serverErrorMessages\">\n  {{ serverErrorMessages }}\n</div>\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Post } from '../shared/post';\n@Injectable({\n  providedIn: 'root',\n})\nexport class PostService {\n  public posts: Post[];\n  selectedPost: Post = {\n    title: '',\n    enterprise: '',\n    type: '',\n    address: '',\n    date: new Date(),\n    image: '',\n    salary: null,\n    experience: '',\n    description: '',\n    email: '',\n    tags: '',\n  };\n  constructor(private http: HttpClient) {}\n  createPost(post: FormData) {\n    return this.http.post('addpost', post);\n  }\n  getPosts() {\n    return this.http.get('getAllposts/');\n  }\n  deletePost(id: string) {\n    return this.http.delete('deletepost/' + id);\n  }\n  testPost(image: FormData) {\n    return this.http.post('addpost', image);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { User } from '../shared/user';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  selectedUser: User = {\n    name: '',\n    email: '',\n    password: '',\n    role: '',\n  };\n  noAuthHeader = { headers: new HttpHeaders({ NoAuth: 'True' }) };\n  constructor(private http: HttpClient) {}\n  createUser(user: User) {\n    return this.http.post('signup', user);\n  }\n  login(authCredentials) {\n    return this.http.post('login', authCredentials, this.noAuthHeader);\n  }\n\n  getUserProfile() {\n    return this.http.get('getuser');\n  }\n  //token field\n  setToken(token: string) {\n    localStorage.setItem('token', token);\n  }\n\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  deleteToken() {\n    localStorage.removeItem('token');\n  }\n  //role field\n  setRole(role: string) {\n    localStorage.setItem('ROLE', role);\n  }\n  getRole() {\n    return localStorage.getItem('ROLE');\n  }\n  deleteRole() {\n    localStorage.removeItem('ROLE');\n  }\n  getUserPayload() {\n    let token = this.getToken();\n    if (token) {\n      let userPayload = atob(token.split('.')[1]);\n      return JSON.parse(userPayload);\n    } else return null;\n  }\n  //email field\n  setEmail(email: string) {\n    localStorage.setItem('Email', email);\n  }\n  getEmail() {\n    return localStorage.getItem('Email');\n  }\n  deleteEmail() {\n    localStorage.removeItem('Email');\n  }\n  isLoggedIn() {\n    let userPayload = this.getUserPayload();\n    if (userPayload) return userPayload.exp > Date.now() / 1000;\n    else return false;\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}